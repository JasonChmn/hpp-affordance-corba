// Copyright (C) 2016 CNRS
// Authors:  Anna Seppala
//
// This file is part of the hpp-affordance-corbaserver.
//
// This software is provided "as is" without warranty of any kind,
// either expressed or implied, including but not limited to the
// implied warranties of fitness for a particular purpose.
//
// See the COPYING file for more information.

#ifndef HPP_AFFORDANCE_CORBA_SERVER_IDL
# define HPP_AFFORDANCE_CORBA_SERVER_IDL
# include <hpp/corbaserver/common.idl>
module hpp
{
  typedef sequence<double> doubleSeq;
	typedef sequence<doubleSeq> doubleSeqSeq;
	typedef sequence<doubleSeqSeq> doubleSeqSeqSeq;
	typedef sequence<doubleSeqSeqSeq> doubleSeqSeqSeqSeq;
  module corbaserver {
    module affordance {

      /// Creation of a device.
      interface Afford {

				void resetAffordanceConfig() raises (Error);
		
				///
				void setAffordanceConfig (in string affType, in doubleSeq conf)
					raises (Error);

				doubleSeq getAffordanceConfig (in string affType) raises (Error);

				void setMargin (in string affType, in double margin) raises (Error);

				void setNeighbouringTriangleMargin (in string affType,
					in double nbTriMargin) raises (Error);

					void setMinimumArea (in string affType, in double minArea)
					raises (Error);


				/// creates collisionObjects for each found affordance of 
				/// given object. Affordances are added to a container in problemSolver
				///
				/// \param obstacleName Name of the collisionObstacle to be analysed
        void analyseObject (in string obstacleName) raises (Error);
				
				/// creates collisionObjects for each affordance found in
				/// the scene (goes through all obstacles). Affordances are added to 
				/// a container in problemSolver.
				void analyseAll () raises (Error);

				/// deletes all affordance objects of given obstacle.
				///
				/// \param obstacleName name of obstacle, the affordances of which will
				/// be deleted
				void deleteAffordances (in string obstacleName) raises (Error);

				/// deletes affordance objects of given affordance type 
				/// for a given obstacle
				/// \param affordance Type of affordance to be deleted
				/// \param obstacleName name of obstacle, the affordances of which will
				/// be deleted.
				void deleteAffordancesByType (in string affordance,
					in string obstacleName) raises (Error);

				/// returns vertice points for each triangle in each affordance object
				/// of specified aff type
				/// \param affordance Affordance type for which triangle points
				///	are searched.
				doubleSeqSeqSeqSeq getAffordancePoints (in string affordance) 
					raises (Error);

				/// returns a list of reference obstacles corresponding to the
				/// affordance object. The size of the return variable is equal
				/// to the number of affordances of given type.
				///
				/// \parame affordance Affordance type for which reference obstacles
				/// are searched.
				Names_t getAffRefObstacles (in string affordance)
					raises (Error);

				/// Get list of affordance types used in affordance analysis.
				Names_t getAffordanceTypes () raises (Error);

			}; // interface Afford
    }; // module affordance
  }; // module corbaserver
}; // module hpp
#endif // HPP_AFFORDANCE_CORBA_SERVER_IDL
